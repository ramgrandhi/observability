Resources:
  TriggerLambda2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:provider.stackName}-triggerLambda2Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:CreateNetworkInterface
                  - ec2:AttachNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DetachNetworkInterface
                  - ec2:ModifyNetworkInterfaceAttribute
                  - ec2:ResetNetworkInterfaceAttribute
                  - autoscaling:CompleteLifecycleAction
                Resource: "*"
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: !GetAtt TriggerQueue2.Arn
              - Effect: "Allow"
                Action:
                  - states:*
                Resource: "*"
              # Good to know : Trigger Lambda IAM role needs to have the following KMS permissions
              # on AWS-Managed Key in order to be able to subscribe from encrypted SNS topic successfully.
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey
                  - kms:Decrypt
                Resource:
                  - arn:aws:kms:${aws:region}:${aws:accountId}:alias/${self:service}-encryption-key

  TriggerLambda2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Lambda Security Group"
      VpcId: ${env:AWS_VPC_ID}
      SecurityGroupIngress:
        - IpProtocol: "-1"
          Description: "From StepFunction"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
          Description: "To Everywhere"

  TriggerQueue2:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      QueueName: "START_FLOW_TWO_QUEUE"
      KmsMasterKeyId: alias/${self:service}-encryption-key
      # Good to know : AWS SQS does encryption-in-transit 'by default' over TLS.
      # By using customer-managed key (see above), we enabled encryption-at-rest as well (Server-side encryption).

  TriggerQueue2Policy:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
      - TriggerLambda2EventSourceMappingSQSTriggerQueue2 # Gotcha! - SQS Queue Policy / restrictions MUST be applied only after the Lambda EventSource got created successfully, hence the 'DependsOn' here.
        # This will avoid Chicken-Egg situation during first-time deployment of Lambdas and not having enough queue permissions to get attached to.
        # Refer to https://www.serverless.com/framework/docs/providers/aws/guide/resources/ for AWS resource names that are automatically generated by Serverless Framework.
    Properties:
      Queues:
        - !Ref TriggerQueue2
      PolicyDocument:
        Statement:
          - Sid: "Allow SNS"
            Effect: "Allow"
            Principal:
              Service: sns.amazonaws.com
            Action:
              - "sqs:SendMessage"
            Resource: !GetAtt TriggerQueue2.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref EventTopic1
          - Sid: "Allow Lambda"
            Effect: "Allow"
            Principal:
              AWS: !GetAtt TriggerLambda2Role.Arn
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
            Resource: !GetAtt TriggerQueue2.Arn

  SubscriptionToEvent1:
    Type: "AWS::SNS::Subscription"
    DependsOn: TriggerQueue2Policy # Gotcha! - Subscription must always succeed QueuePolicy resource, hence you see 'DependsOn' below
    Properties:
      TopicArn: !Ref EventTopic1
      Endpoint: !GetAtt TriggerQueue2.Arn
      Protocol: sqs
